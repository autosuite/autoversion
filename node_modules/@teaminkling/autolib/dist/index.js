"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var max_satisfying_1 = __importDefault(require("semver/ranges/max-satisfying"));
var core = __importStar(require("@actions/core"));
var exec = __importStar(require("@actions/exec"));
function findLatestVersionFromText(text, stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var cleanedText, textBlocks, cleanedTextBlocks, maxVersion;
        return __generator(this, function (_a) {
            cleanedText = text.trim();
            textBlocks = cleanedText.split("\n");
            cleanedTextBlocks = textBlocks.map(String.prototype.trim);
            maxVersion = max_satisfying_1.default(cleanedTextBlocks, ">0.0.0", { includePrerelease: !stableOnly }) || "0.0.0";
            if (stableOnly) {
                core.info("[Autolib] [Result] Of input: [" + cleanedText + "] the max stable version found was: [" + maxVersion + "].");
            }
            else {
                core.info("[Autolib] [Result] Of input: [" + cleanedText + "] the max unstable version found was: [" + maxVersion + "].");
            }
            return [2 /*return*/, maxVersion];
        });
    });
}
exports.findLatestVersionFromText = findLatestVersionFromText;
/**
 * Using `git` tags, find the latest version (if this is possible).
 *
 * If no version is found, just return 0.0.0 with no info associated.
 *
 * @param stableOnly whether we should only extract stable versions
 */
function findLatestVersionFromGitTags(stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var latestVersion;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    latestVersion = null;
                    return [4 /*yield*/, exec.exec('git fetch --tags')];
                case 1:
                    _a.sent();
                    // noinspection AnonymousFunctionJS
                    return [4 /*yield*/, exec.exec('git tag', [], {
                            listeners: {
                                stdout: function (data) { return __awaiter(_this, void 0, void 0, function () {
                                    var dataText;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                dataText = data.toString();
                                                return [4 /*yield*/, (findLatestVersionFromText(dataText, stableOnly))];
                                            case 1:
                                                latestVersion = _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            }
                        })];
                case 2:
                    // noinspection AnonymousFunctionJS
                    _a.sent();
                    /* Fallback to 0.0.0 when no tags are found to be valid. */
                    if (!latestVersion) {
                        core.warning("[Autolib] No tags were found, returning a max version of [0.0.0].");
                    }
                    return [2 /*return*/, latestVersion || "0.0.0"];
            }
        });
    });
}
exports.findLatestVersionFromGitTags = findLatestVersionFromGitTags;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0ZBQW1FO0FBRW5FLGtEQUFzQztBQUN0QyxrREFBc0M7QUFHdEMsU0FBc0IseUJBQXlCLENBQUMsSUFBWSxFQUFFLFVBQW1COzs7O1lBR3ZFLFdBQVcsR0FBVyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsVUFBVSxHQUFhLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0MsaUJBQWlCLEdBQWEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBSXBFLFVBQVUsR0FBVyx3QkFBdUIsQ0FDOUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLEVBQUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVLEVBQUMsQ0FDaEUsSUFBSSxPQUFPLENBQUM7WUFFYixJQUFJLFVBQVUsRUFBRTtnQkFDWixJQUFJLENBQUMsSUFBSSxDQUNMLG1DQUFpQyxXQUFXLDZDQUF3QyxVQUFVLE9BQUksQ0FDckcsQ0FBQzthQUNMO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQ0wsbUNBQWlDLFdBQVcsK0NBQTBDLFVBQVUsT0FBSSxDQUN2RyxDQUFDO2FBQ0w7WUFFRCxzQkFBTyxVQUFVLEVBQUM7OztDQUNyQjtBQXhCRCw4REF3QkM7QUFHRDs7Ozs7O0dBTUc7QUFDSCxTQUFzQiw0QkFBNEIsQ0FBQyxVQUFtQjs7Ozs7OztvQkFDOUQsYUFBYSxHQUFrQixJQUFJLENBQUM7b0JBRXhDLHFCQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBQTs7b0JBQW5DLFNBQW1DLENBQUM7b0JBRXBDLG1DQUFtQztvQkFDbkMscUJBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFOzRCQUMzQixTQUFTLEVBQUU7Z0NBQ1AsTUFBTSxFQUFFLFVBQU8sSUFBWTs7Ozs7Z0RBQ2pCLFFBQVEsR0FBVyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0RBRXpCLHFCQUFNLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUE7O2dEQUF2RSxhQUFhLEdBQUcsU0FBdUQsQ0FBQzs7OztxQ0FDM0U7NkJBQ0o7eUJBQ0osQ0FBQyxFQUFBOztvQkFURixtQ0FBbUM7b0JBQ25DLFNBUUUsQ0FBQztvQkFFSCwyREFBMkQ7b0JBRTNELElBQUksQ0FBQyxhQUFhLEVBQUU7d0JBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsbUVBQW1FLENBQUMsQ0FBQztxQkFDckY7b0JBRUQsc0JBQU8sYUFBYSxJQUFJLE9BQU8sRUFBQzs7OztDQUNuQztBQXZCRCxvRUF1QkMifQ==